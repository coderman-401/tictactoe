{"version":3,"sources":["components/Square.js","components/Board.js","components/RadioButton.js","logic/AI.js","logic/Win.js","components/StatesTable.js","components/GameStates.js","Game.js","index.js"],"names":["Square","props","className","value","onClick","Board","createBoard","board","k","i","children","j","push","renderSquare","key","this","squares","React","Component","RadioButton","label","type","name","onChange","checked","evaluate","mat","depth","minmax","get_max","hasMovesLeft","val","best","Infinity","Math","max","min","findBestMove","difficulty","arrayToMat","row","col","lines","length","a","b","c","checkWin","calculateWinner","winner","line","StateTable","xSingleWins","oSingleWins","drawSingle","xTwoWins","oTwoWins","drawTwo","GameState","src","width","alt","xWins","oWins","draw","onClickElement","Game","renderPlayers","player","state","onPlayerChange","renderDifficulty","onDifficultyChange","renderPlayerTurnInfo","turnInfoComponent","xIsNextTwoPlayer","playerTurn","checkForWinner","winner_player","turn","x_wins_single","o_wins_single","draw_single","x_wins_two","o_wins_two","draw_two","winnerdata","toUpperCase","swal","title","then","setTimeout","restartGame","includes","Array","fill","xIsNextVsAI","bind","setState","ai_index","x_wins","o_wins","e","currentTarget","buttons","content","handleClick","showStats","target","href","ReactDOM","render","document","getElementById"],"mappings":"mRAYeA,EAVA,SAAAC,GACX,OACI,4BACIC,UAAS,iBAAYD,EAAME,OAC3BC,QAASH,EAAMG,SACdH,EAAME,QCJEE,E,2MAYjBC,YAAc,WAIV,IAHA,IAAIC,EAAQ,GACRC,EAAI,EAECC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAGxB,IAFA,IAAIC,EAAW,GAENC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAASE,KAAK,EAAKC,aAAaL,IAChCA,IAGJD,EAAMK,KACF,yBACIE,IAAKL,EACLP,UAAU,aACTQ,IAIb,OAAOH,G,4EA9BEE,GAAI,IAAD,OACZ,OACI,kBAAC,EAAD,CACIK,IAAKL,EACLN,MAAOY,KAAKd,MAAMe,QAAQP,GAAKM,KAAKd,MAAMe,QAAQP,GAAK,GACvDL,QAAS,kBAAM,EAAKH,MAAMG,QAAQK,Q,+BA6B1C,OACI,yBAAKP,UAAU,cACX,yBAAKA,UAAU,SACVa,KAAKT,oB,GAvCSW,IAAMC,WCgB1BC,EAjBK,SAAAlB,GAChB,OACI,yBAAKC,UAAU,gBACX,2BAAOA,UAAU,mBACZD,EAAMmB,MACP,2BACIjB,MAAOF,EAAME,MACbkB,KAAK,QACLC,KAAMrB,EAAMqB,KACZC,SAAUtB,EAAMsB,SAChBC,QAASvB,EAAMuB,UACnB,0BAAMtB,UAAU,iB,OC2B1BuB,EAAW,SAACC,EAAKC,GAGtB,IAAK,IAAIlB,EAAI,EAAGA,EAAI,EAAGA,IACtB,GAAIiB,EAAIjB,GAAG,KAAOiB,EAAIjB,GAAG,IAAMiB,EAAIjB,GAAG,KAAOiB,EAAIjB,GAAG,IAAMiB,EAAIjB,GAAG,KAAOiB,EAAIjB,GAAG,GAAI,CAClF,GAAkB,MAAdiB,EAAIjB,GAAG,GAAY,OAAO,IAAMkB,EACpC,GAAkB,MAAdD,EAAIjB,GAAG,GAAY,OAAOkB,EAAQ,IAKxC,IAAK,IAAIhB,EAAI,EAAGA,EAAI,EAAGA,IACtB,GAAIe,EAAI,GAAGf,KAAOe,EAAI,GAAGf,IAAMe,EAAI,GAAGf,KAAOe,EAAI,GAAGf,IAAMe,EAAI,GAAGf,KAAOe,EAAI,GAAGf,GAAI,CAClF,GAAkB,MAAde,EAAI,GAAGf,GAAY,OAAO,IAAMgB,EACpC,GAAkB,MAAdD,EAAI,GAAGf,GAAY,OAAOgB,EAAQ,IAKxC,GAAID,EAAI,GAAG,KAAOA,EAAI,GAAG,IAAMA,EAAI,GAAG,KAAOA,EAAI,GAAG,IAAMA,EAAI,GAAG,KAAOA,EAAI,GAAG,GAAI,CAClF,GAAkB,MAAdA,EAAI,GAAG,GAAY,OAAO,IAAMC,EACpC,GAAkB,MAAdD,EAAI,GAAG,GAAY,OAAOC,EAAQ,IAGvC,GAAID,EAAI,GAAG,KAAOA,EAAI,GAAG,IAAMA,EAAI,GAAG,KAAOA,EAAI,GAAG,IAAMA,EAAI,GAAG,KAAOA,EAAI,GAAG,GAAI,CAClF,GAAkB,MAAdA,EAAI,GAAG,GAAY,OAAO,IAAMC,EACpC,GAAkB,MAAdD,EAAI,GAAG,GAAY,OAAOC,EAAQ,IAIvC,OAAO,GAGFC,EAAS,SAATA,EAAUF,EAAKC,EAAOE,GAC3B,IAA0B,IAhEN,SAAAH,GAEpB,IAAK,IAAIjB,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IACtB,GAAkB,OAAde,EAAIjB,GAAGE,GAAa,OAAO,EAGjC,OAAO,EAyDHmB,CAAaJ,GAChB,OAAOD,EAASC,EAAKC,GAGtB,IAAII,EAAMN,EAASC,EAAKC,GAExB,GAAY,IAARI,EAAW,OAAOA,EAEtB,GAAIF,EAAS,CAEZ,IADA,IAAIG,GAAQC,IACHxB,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IACJ,OAAde,EAAIjB,GAAGE,KACVe,EAAIjB,GAAGE,GAAK,IACZqB,EAAOE,KAAKC,IAAIH,EAAMJ,EAAOF,EAAKC,EAAM,GAAIE,IAC5CH,EAAIjB,GAAGE,GAAK,MAIf,OAAOqB,EAIP,IADA,IAAIA,EAAOC,IACFxB,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IACJ,OAAde,EAAIjB,GAAGE,KACVe,EAAIjB,GAAGE,GAAK,IACZqB,EAAOE,KAAKE,IAAIJ,EAAMJ,EAAOF,EAAKC,EAAM,GAAIE,IAC5CH,EAAIjB,GAAGE,GAAK,MAIf,OAAOqB,GAkCMK,EA7BM,SAACrB,EAASsB,GAC9B,IACIP,EADAL,EAhHc,SAAAV,GAGlB,IAFA,IAAIU,EAAM,GACNlB,EAAI,EACCC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC3BiB,EAAIjB,GAAK,GACT,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAKe,EAAIjB,GAAGE,GAAKK,EAAQR,KAEjD,OAAOkB,EAyGGa,CAAWvB,GACZwB,GAAO,EAAGC,GAAO,EAAGT,GAAQC,IAErC,IAAyB,IAhGT,SAAAP,GAYhB,IAXA,IAAMgB,EAAQ,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGCjC,EAAI,EAAGA,EAAIiC,EAAMC,OAAQlC,IAAK,CAAC,IAAD,cACpBiC,EAAMjC,GADc,GAC/BmC,EAD+B,KAC5BC,EAD4B,KACzBC,EADyB,KAEtC,GAAIpB,EAAIkB,IAAMlB,EAAIkB,KAAOlB,EAAImB,IAAMnB,EAAIkB,KAAOlB,EAAIoB,GACjD,OAAO,EAGT,OAAO,EA8EJC,CAAS/B,GAAoB,CAC/B,IAAK,IAAIP,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IACJ,OAAde,EAAIjB,GAAGE,KACQ,SAAf2B,EACFZ,EAAIjB,GAAGE,GAAK,IACY,SAAf2B,EACTZ,EAAIjB,GAAGE,GAAK,IACY,WAAf2B,IACTZ,EAAIjB,GAAGE,GAAK,KAEboB,EAAMH,EAAOF,EAAK,GAAG,GACrBA,EAAIjB,GAAGE,GAAK,KACRoB,EAAMC,IACTA,EAAOD,EACPS,EAAM/B,EACNgC,EAAM9B,IAKV,OAAQ,EAAI6B,EAAOC,IChHNO,EAxBS,SAAAhC,GAYpB,IAXA,IAAM0B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGFjC,EAAI,EAAGA,EAAIiC,EAAMC,OAAQlC,IAAK,CAAC,IAAD,cACjBiC,EAAMjC,GADW,GAC5BmC,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GAClE,MAAO,CACHG,OAAQjC,EAAQ4B,GAChBM,KAAM,CAACN,EAAEC,EAAEC,IAIvB,OAAO,MCUIK,EA7BI,SAAAlD,GACf,OACI,2BAAOC,UAAU,wBACb,+BACI,4BACI,6BACA,sCACA,sCACA,sCAGR,+BACI,4BACI,6CACA,4BAAKD,EAAMmD,aACX,4BAAKnD,EAAMoD,aACX,4BAAKpD,EAAMqD,aAEf,4BACI,0CACA,4BAAKrD,EAAMsD,UACX,4BAAKtD,EAAMuD,UACX,4BAAKvD,EAAMwD,aCXhBC,EAXG,SAAAzD,GACd,OACI,yBAAKC,UAAU,cACX,uBAAGA,UAAU,SAAQ,yBAAKyD,IAAI,cAAcC,MAAM,KAAKC,IAAI,MAA3D,aAA0E,6BAAS,8BAAO5D,EAAM6D,QAChG,uBAAG5D,UAAU,SAAQ,yBAAKyD,IAAI,cAAcC,MAAM,KAAKC,IAAI,MAA3D,aAA0E,6BAAS,8BAAO5D,EAAM8D,QAChG,uBAAG7D,UAAU,SAAb,UAA4B,6BAAS,8BAAOD,EAAM+D,OAClD,uBAAG9D,UAAU,QAAQE,QAASH,EAAMgE,gBAApC,OAAwD,6BAAxD,WCqRGC,E,YAlRX,WAAYjE,GAAQ,IAAD,8BACf,4CAAMA,KA8GVkE,cAAgB,WAAO,IACZC,EAAU,EAAKC,MAAfD,OAmBP,OAjBI,yBAAKlE,UAAU,iBACX,kBAAC,EAAD,CACIC,MAAM,SACNiB,MAAM,gBACNE,KAAK,QACLC,SAAU,EAAK+C,eACf9C,QAAoB,WAAX4C,IAEb,kBAAC,EAAD,CACIjE,MAAM,MACNiB,MAAM,aACNE,KAAK,QACLC,SAAU,EAAK+C,eACf9C,QAAoB,QAAX4C,MA/HN,EAsInBG,iBAAmB,WAAO,IAAD,EACQ,EAAKF,MAA3BD,EADc,EACdA,OAAQ9B,EADM,EACNA,WACf,GAAe,WAAX8B,EA0BA,OAxBI,yBAAKlE,UAAU,qBACX,kBAAC,EAAD,CACIC,MAAM,OACNiB,MAAM,OACNE,KAAK,SACLC,SAAU,EAAKiD,mBACfhD,QAAwB,SAAfc,IAEb,kBAAC,EAAD,CACInC,MAAM,OACNiB,MAAM,OACNE,KAAK,SACLC,SAAU,EAAKiD,mBACfhD,QAAwB,SAAfc,IAEb,kBAAC,EAAD,CACInC,MAAM,SACNiB,MAAM,SACNE,KAAK,SACLC,SAAU,EAAKiD,mBACfhD,QAAwB,WAAfc,MA9JV,EAsKnBmC,qBAAuB,WAAO,IAEtBC,EAFqB,EACY,EAAKL,MAAlCD,EADiB,EACjBA,OAAQO,EADS,EACTA,iBAEVC,EAAa,yBAAKf,IAAI,SAASF,IAAG,gBAAYgB,EAAmB,QAAU,SAAWf,MAAM,OAgBlG,MAfe,QAAXQ,IACAM,EACI,yBAAKxE,UAAU,eACX,yCAAe0E,EAAf,gBAIG,WAAXR,IACAM,EACI,yBAAKxE,UAAU,eACX,wCAAa,yBAAKyD,IAAI,cAAcC,MAAM,KAAKC,IAAI,OACnD,4CAAiB,yBAAKF,IAAI,cAAcC,MAAM,KAAKC,IAAI,SAI5Da,GAzLQ,EA2LnBG,eAAiB,WAAO,IAIhBC,EAAeC,EAJA,EAC2B,EAAKV,MAA3CrD,EADW,EACXA,QAASoD,EADE,EACFA,OAAQO,EADN,EACMA,iBADN,EAEkE,EAAKN,MAApFW,EAFa,EAEbA,cAAeC,EAFF,EAEEA,cAAeC,EAFjB,EAEiBA,YAAaC,EAF9B,EAE8BA,WAAYC,EAF1C,EAE0CA,WAAYC,EAFtD,EAEsDA,SACnEC,EAAatC,EAAgBhC,GAGpB,WAAXoD,EACIkB,GAEsB,OADtBR,EAAgBQ,EAAWrC,OAAOsC,gBAE9BT,EAAgB,KAChBE,GAAiB,IAEjBF,EAAgB,MAChBG,GAAiB,GAErBO,IAAK,CAACC,MAAQX,EAAgB,SAASY,KAAK,WACxCC,WAAW,WACP,EAAKC,YAAYZ,EAAeC,EAAeC,EAAaH,EAAMX,IACnE,QAECpD,EAAQ6E,SAAS,QACzBX,GAAe,EACfM,IAAK,CAACC,MAAO,kBAAkBC,KAAK,WAChCC,WAAW,WACP,EAAKC,YAAYZ,EAAeC,EAAeC,EAAaP,EAAkBP,IAC/E,QAIPkB,GAEsB,OADtBR,EAAgBQ,EAAWrC,OAAOsC,iBAE9BJ,GAAc,EACdJ,GAAO,GAEW,MAAlBD,IACAM,GAAc,EACdL,GAAO,GAEXS,IAAK,CAACC,MAAQX,EAAgB,SAASY,KAAK,WACxCC,WAAW,WACP,EAAKC,YAAYT,EAAYC,EAAYC,EAAUN,EAAMX,IAC1D,QAECpD,EAAQ6E,SAAS,QACzBR,GAAY,EACZG,IAAK,CAACC,MAAO,kBAAkBC,KAAK,WAChCC,WAAW,WACP,EAAKC,YAAYT,EAAYC,EAAYC,EAAUV,IACpD,SA3Of,EAAKN,MAAQ,CACTrD,QAAS8E,MAAM,GAAGC,KAAK,MACvBpB,kBAAkB,EAClBqB,aAAa,EACb5B,OAAQ,SACR9B,WAAY,SACZ0C,cAAe,EACfG,WAAY,EACZD,YAAa,EACbD,cAAe,EACfG,WAAY,EACZC,SAAU,GAGd,EAAKf,eAAiB,EAAKA,eAAe2B,KAApB,gBACtB,EAAKzB,mBAAqB,EAAKA,mBAAmByB,KAAxB,gBAjBX,E,yEAqBPxF,GAAI,IACLO,EAAWD,KAAKsD,MAAhBrD,QACDsE,EAAatC,EAAgBhC,GACnC,IAAIsE,IAAatE,EAAQP,KAIC,QAAtBM,KAAKsD,MAAMD,SACXpD,EAAQP,GAAKM,KAAKsD,MAAMM,iBAAmB,IAAM,IACjD5D,KAAKmF,SAAS,CACVlF,UACA2D,kBAAmB5D,KAAKsD,MAAMM,oBAIZ,WAAtB5D,KAAKsD,MAAMD,QAAqB,CAChC,GAAIkB,EACA,OAEAtE,EAAQP,GAAK,IACb,IAAI6B,EAAavB,KAAKsD,MAAM/B,WACxB6D,EAAW9D,EAAarB,EAASsB,IACnB,IAAd6D,IAAiBnF,EAAQmF,GAAY,KACzCpF,KAAKmF,SAAS,CACVlF,e,kCAMJoF,EAAQC,EAAQrC,GAAmC,IAA7Be,EAA4B,uDAArB,KAAMX,EAAe,uDAAN,KACrC,WAAXA,EACArD,KAAKmF,SAAS,CACVlF,QAAS8E,MAAM,GAAGC,KAAK,MACvBpB,iBAAkBI,EAClBC,cAAeoB,EACfnB,cAAeoB,EACfnB,YAAalB,IAGjBjD,KAAKmF,SAAS,CACVlF,QAAS8E,MAAM,GAAGC,KAAK,MACvBpB,iBAAkBI,EAClBI,WAAYiB,EACZhB,WAAYiB,EACZhB,SAAUrB,M,qCAKPsC,GAAI,IAAD,EACwEvF,KAAKsD,MAApFW,EADO,EACPA,cAAeC,EADR,EACQA,cAAeC,EADvB,EACuBA,YAAaC,EADpC,EACoCA,WAAYC,EADhD,EACgDA,WAAYC,EAD5D,EAC4DA,SAC1EtE,KAAKmF,SAAS,CACV9B,OAASkC,EAAEC,cAAcpG,QAEC,WAA1BmG,EAAEC,cAAcpG,MAChBY,KAAK6E,YAAYT,EAAYC,EAAYC,GAEzCtE,KAAK6E,YAAYZ,EAAeC,EAAeC,GAAa,EAAM,Y,yCAIvDoB,GAAI,IAAD,EACyBvF,KAAKsD,MAAzCc,EADW,EACXA,WAAYC,EADD,EACCA,WAAYC,EADb,EACaA,SAC/BtE,KAAKmF,SAAS,CACV5D,WAAagE,EAAEC,cAAcpG,QAEjCY,KAAK6E,YAAYT,EAAYC,EAAYC,K,kCAGhC,IAAD,EAC8EtE,KAAKsD,MAApFW,EADC,EACDA,cAAeC,EADd,EACcA,cAAeC,EAD7B,EAC6BA,YAAaC,EAD1C,EAC0CA,WAAYC,EADtD,EACsDA,WAAYC,EADlE,EACkEA,SAC1EG,IAAK,CACDC,MAAO,iBACPe,QAAU,KACVC,QACI,yBAAKvG,UAAU,eACX,kBAAC,EAAD,CACIkD,YAAa4B,EACb3B,YAAa4B,EACb3B,WAAY4B,EACZ3B,SAAU4B,EACV3B,SAAU4B,EACV3B,QAAS4B,S,+BA2InB,IAAD,SACuBtE,KAAKsD,MAAzBrD,EADH,EACGA,QAASoD,EADZ,EACYA,OADZ,EAEgFrD,KAAKsD,MAApFW,EAFD,EAECA,cAAeC,EAFhB,EAEgBA,cAAeC,EAF/B,EAE+BA,YAAaC,EAF5C,EAE4CA,WAAYC,EAFxD,EAEwDA,WAAYC,EAFpE,EAEoEA,SAGzE,OAFAtE,KAAK8D,iBAGD,yBAAK3E,UAAU,gBACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,SAAd,cAAiC,0BAAMA,UAAU,WAAhB,qBAC/Ba,KAAKoD,gBACLpD,KAAKwD,mBACLxD,KAAK0D,wBAEX,yBAAKvE,UAAU,iBACX,kBAAC,EAAD,CACIc,QAASA,EACTZ,QAAS,SAAAK,GAAC,OAAI,EAAKiG,YAAYjG,MAEnC,kBAAC,EAAD,CACIqD,MAAkB,WAAXM,EAAsBY,EAAgBG,EAC7CpB,MAAkB,WAAXK,EAAsBa,EAAgBG,EAC7CpB,KAAiB,WAAXI,EAAsBc,EAAcG,EAC1CpB,eAAgB,kBAAK,EAAK0C,gBAElC,wBAAIzG,UAAU,eAAd,uCACA,uBAAGA,UAAU,OAAO0G,OAAO,QAAQC,KAAK,sCAAxC,6B,GA7QG5F,IAAMC,W,MCLzB4F,IAASC,OACR,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.7bb92fa2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = props => {\r\n    return (\r\n        <button\r\n            className={`square ${props.value}`}\r\n            onClick={props.onClick} >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nexport default class Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                key={i}\r\n                value={this.props.squares[i] ? this.props.squares[i] : ''}\r\n                onClick={() => this.props.onClick(i)} />\r\n        );\r\n    }\r\n\r\n    // Create board using two loops\r\n    createBoard = () => {\r\n        let board = [];\r\n        let k = 0;\r\n        // Outer loop to create parent\r\n        for (let i = 0; i < 3; i++) {\r\n            let children = []\r\n            //Inner loop to create children\r\n            for (let j = 0; j < 3; j++) {\r\n                children.push(this.renderSquare(k));\r\n                k++\r\n            }\r\n            //Create the parent and add the children\r\n            board.push(\r\n                <div\r\n                    key={i}\r\n                    className=\"board-row\">\r\n                    {children}\r\n                </div>\r\n            );\r\n        }\r\n        return board\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game-board\">\r\n                <div className=\"board\">\r\n                    {this.createBoard()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst RadioButton = props => {\r\n    return (\r\n        <div className=\"radio-button\">\r\n            <label className=\"radio-container\">\r\n                {props.label}\r\n                <input \r\n                    value={props.value}\r\n                    type=\"radio\"\r\n                    name={props.name}\r\n                    onChange={props.onChange}\r\n                    checked={props.checked} />\r\n                <span className=\"checkmark\"></span>\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RadioButton;\r\n","const arrayToMat = squares => {\r\n\tlet mat = []\r\n\tlet k = 0;\r\n\tfor (let i = 0; i < 3; i++) {\r\n\t\tmat[i] = [];\r\n\t\tfor (let j = 0; j < 3; j++) mat[i][j] = squares[k++];\r\n\t}\r\n\treturn mat;\r\n}\r\n\r\nconst hasMovesLeft = mat => {\r\n\t// If it has an empty space, keep playing\r\n\tfor (let i = 0; i < 3; i++) {\r\n\t\tfor (let j = 0; j < 3; j++) {\r\n\t\t\tif (mat[i][j] === null) return true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\nconst checkWin = mat => {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6]\r\n\t];\r\n\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst [a, b, c] = lines[i];\r\n\t\tif (mat[a] && mat[a] === mat[b] && mat[a] === mat[c]) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nconst evaluate = (mat, depth) => {\r\n\r\n\t// Check every row\r\n\tfor (let i = 0; i < 3; i++) {\r\n\t\tif (mat[i][0] === mat[i][1] && mat[i][0] === mat[i][2] && mat[i][1] === mat[i][2]) {\r\n\t\t\tif (mat[i][0] === 'X') return 100 - depth;\r\n\t\t\tif (mat[i][0] === 'O') return depth - 100;\r\n\t\t}\r\n\t}\r\n\r\n\t// Check every col\r\n\tfor (let j = 0; j < 3; j++) {\r\n\t\tif (mat[0][j] === mat[1][j] && mat[0][j] === mat[2][j] && mat[1][j] === mat[2][j]) {\r\n\t\t\tif (mat[0][j] === 'X') return 100 - depth;\r\n\t\t\tif (mat[0][j] === 'O') return depth - 100;\r\n\t\t}\r\n\t}\r\n\r\n\t// Check the diagonals\r\n\tif (mat[0][0] === mat[1][1] && mat[0][0] === mat[2][2] && mat[1][1] === mat[2][2]) {\r\n\t\tif (mat[0][0] === 'X') return 100 - depth;\r\n\t\tif (mat[0][0] === 'O') return depth - 100;\r\n\t}\r\n\t\r\n\tif (mat[0][2] === mat[1][1] && mat[0][2] === mat[2][0] && mat[1][1] === mat[2][0]) {\r\n\t\tif (mat[0][2] === 'X') return 100 - depth;\r\n\t\tif (mat[0][2] === 'O') return depth - 100;\r\n\t}\r\n\t\r\n\t// If the game hasn't finished yet\r\n\treturn 0;\r\n}\r\n\r\nconst minmax = (mat, depth, get_max) => {\r\n\tif (hasMovesLeft(mat) === false) {\r\n\t\treturn evaluate(mat, depth);\r\n\t}\r\n\t\r\n\tlet val = evaluate(mat, depth);\r\n\t\r\n\tif (val !== 0) return val;\r\n\t\r\n\tif (get_max) {\r\n\t\tlet best = -Infinity;\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\tfor (let j = 0; j < 3; j++) {\r\n\t\t\t\tif (mat[i][j] === null) {\r\n\t\t\t\t\tmat[i][j] = 'X';\r\n\t\t\t\t\tbest = Math.max(best, minmax(mat, depth+1, !get_max));\r\n\t\t\t\t\tmat[i][j] = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn best;\r\n\t}\r\n\telse {\r\n\t\tlet best = Infinity;\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\tfor (let j = 0; j < 3; j++) {\r\n\t\t\t\tif (mat[i][j] === null) {\r\n\t\t\t\t\tmat[i][j] = 'O';\r\n\t\t\t\t\tbest = Math.min(best, minmax(mat, depth+1, !get_max));\r\n\t\t\t\t\tmat[i][j] = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn best;\r\n\t}\r\n\r\n}\r\n\r\nconst findBestMove = (squares, difficulty) => {\r\n\tlet mat = arrayToMat(squares);\r\n\tlet val, row = -1, col = -1, best = -Infinity;\r\n\t\r\n\tif(checkWin(squares) === false) {\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\tfor (let j = 0; j < 3; j++) {\r\n\t\t\t\tif (mat[i][j] === null) {\r\n\t\t\t\t\tif(difficulty === 'easy') {\r\n\t\t\t\t\t\tmat[i][j] = 'O';\r\n\t\t\t\t\t} else if(difficulty === 'hard') {\r\n\t\t\t\t\t\tmat[i][j] = 'x';\r\n\t\t\t\t\t} else if(difficulty === 'expert') {\r\n\t\t\t\t\t\tmat[i][j] = 'X';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tval = minmax(mat, 0, false);\r\n\t\t\t\t\tmat[i][j] = null;\r\n\t\t\t\t\tif (val > best) {\r\n\t\t\t\t\t\tbest = val;\r\n\t\t\t\t\t\trow = i;\r\n\t\t\t\t\t\tcol = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (3 * row) + col;\r\n\t}\r\n}\r\n\r\nexport default findBestMove;\r\n","const calculateWinner = squares => {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return {\r\n                winner: squares[a],\r\n                line: [a,b,c]\r\n            };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default calculateWinner;\r\n","import React from 'react';\r\n\r\nconst StateTable = props => {\r\n    return (\r\n        <table className=\"table table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>X-Wins</th>\r\n                    <th>O-Wins</th>\r\n                    <th>Draw</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Single Player</td>\r\n                    <td>{props.xSingleWins}</td>\r\n                    <td>{props.oSingleWins}</td>\r\n                    <td>{props.drawSingle}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Two Player</td>\r\n                    <td>{props.xTwoWins}</td>\r\n                    <td>{props.oTwoWins}</td>\r\n                    <td>{props.drawTwo}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default StateTable;\r\n","import React from 'react';\r\n\r\nconst GameState = props => {\r\n    return (\r\n        <div className=\"game-stats\">\r\n            <p className=\"stats\"><img src=\"image/x.png\" width=\"15\" alt=\"X\"/> - Wins : <br></br><span>{props.xWins}</span></p>\r\n            <p className=\"stats\"><img src=\"image/o.png\" width=\"15\" alt=\"O\"/> - Wins : <br></br><span>{props.oWins}</span></p>\r\n            <p className=\"stats\">Draw : <br></br><span>{props.draw}</span></p>\r\n            <p className=\"stats\" onClick={props.onClickElement}>View<br/>Stats</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameState;\r\n","import React from 'react';\r\n// import swal from 'sweetalert';\r\nimport swal from '@sweetalert/with-react'\r\nimport Board from './components/Board';\r\nimport RadioButton from './components/RadioButton';\r\nimport findBestMove from './logic/AI';\r\nimport calculateWinner from './logic/Win';\r\nimport StateTable from './components/StatesTable';\r\nimport GameState from './components/GameStates';\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(9).fill(null),\r\n            xIsNextTwoPlayer: true,\r\n            xIsNextVsAI: false,\r\n            player: 'single',\r\n            difficulty: 'expert',\r\n            x_wins_single: 0,\r\n            x_wins_two: 0,\r\n            draw_single: 0,\r\n            o_wins_single: 0,\r\n            o_wins_two: 0,\r\n            draw_two: 0,\r\n        };\r\n\r\n        this.onPlayerChange = this.onPlayerChange.bind(this);\r\n        this.onDifficultyChange = this.onDifficultyChange.bind(this);\r\n    }\r\n \r\n\r\n    handleClick(i) {\r\n        const {squares} = this.state;\r\n        const winnerdata = calculateWinner(squares);\r\n        if (winnerdata|| squares[i]) {\r\n            return;\r\n        }\r\n\r\n        if (this.state.player === 'two') {\r\n            squares[i] = this.state.xIsNextTwoPlayer ? \"X\" : \"O\";\r\n            this.setState({\r\n                squares,\r\n                xIsNextTwoPlayer: !this.state.xIsNextTwoPlayer\r\n            });\r\n        }\r\n\r\n        if (this.state.player === 'single') {\r\n            if (winnerdata) {\r\n                return;\r\n            } else {\r\n                squares[i] = 'O';\r\n                let difficulty = this.state.difficulty;\r\n                let ai_index = findBestMove(squares, difficulty);\r\n                if (ai_index !== -4) squares[ai_index] = 'X';\r\n                this.setState({\r\n                    squares,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    restartGame(x_wins, o_wins, draw, turn = null, player = null) {\r\n        if (player === 'single') {\r\n            this.setState({\r\n                squares: Array(9).fill(null),\r\n                xIsNextTwoPlayer: turn,\r\n                x_wins_single: x_wins,\r\n                o_wins_single: o_wins,\r\n                draw_single: draw,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                squares: Array(9).fill(null),\r\n                xIsNextTwoPlayer: turn,\r\n                x_wins_two: x_wins,\r\n                o_wins_two: o_wins,\r\n                draw_two: draw,\r\n            });\r\n        }\r\n    }\r\n\r\n    onPlayerChange(e) {\r\n        const {x_wins_single, o_wins_single, draw_single, x_wins_two, o_wins_two, draw_two} = this.state;\r\n        this.setState({\r\n            player : e.currentTarget.value\r\n        });\r\n        if (e.currentTarget.value === 'single') {\r\n            this.restartGame(x_wins_two, o_wins_two, draw_two);\r\n        } else {\r\n            this.restartGame(x_wins_single, o_wins_single, draw_single, true, 'single');\r\n        }\r\n    }\r\n    \r\n    onDifficultyChange(e) {\r\n        const {x_wins_two, o_wins_two, draw_two} = this.state;\r\n        this.setState({\r\n            difficulty : e.currentTarget.value\r\n        });\r\n        this.restartGame(x_wins_two, o_wins_two, draw_two);\r\n    }\r\n\r\n    showStats() {\r\n        const {x_wins_single, o_wins_single, draw_single, x_wins_two, o_wins_two, draw_two} = this.state;\r\n        swal({\r\n            title: \"Game Statitics\",\r\n            buttons:  \"OK\",\r\n            content: (\r\n                <div className=\"stats-tabel\">\r\n                    <StateTable\r\n                        xSingleWins={x_wins_single}\r\n                        oSingleWins={o_wins_single}\r\n                        drawSingle={draw_single}\r\n                        xTwoWins={x_wins_two}\r\n                        oTwoWins={o_wins_two}\r\n                        drawTwo={draw_two}\r\n                    />\r\n                </div>\r\n            )\r\n        });\r\n    };\r\n\r\n    renderPlayers = () => {\r\n        const {player} = this.state;\r\n        const playersComponent = (\r\n            <div className=\"select_player\">\r\n                <RadioButton\r\n                    value=\"single\"\r\n                    label=\"Single Player\"\r\n                    name=\"radio\"\r\n                    onChange={this.onPlayerChange}\r\n                    checked={player === 'single'}\r\n                />\r\n                <RadioButton\r\n                    value=\"two\"\r\n                    label=\"Two Player\"\r\n                    name=\"radio\"\r\n                    onChange={this.onPlayerChange}\r\n                    checked={player === 'two'}\r\n                />\r\n            </div>\r\n        );\r\n        return playersComponent\r\n    }\r\n\r\n    renderDifficulty = () => {\r\n        const {player, difficulty} = this.state;\r\n        if (player === 'single') {\r\n            const difficultyComponent = (\r\n                <div className=\"select_difficulty\">\r\n                    <RadioButton \r\n                        value=\"easy\"\r\n                        label=\"Easy\"\r\n                        name=\"radio1\"\r\n                        onChange={this.onDifficultyChange}\r\n                        checked={difficulty === 'easy'}\r\n                    />\r\n                    <RadioButton \r\n                        value=\"hard\"\r\n                        label=\"Hard\"\r\n                        name=\"radio1\"\r\n                        onChange={this.onDifficultyChange}\r\n                        checked={difficulty === 'hard'}\r\n                    />\r\n                    <RadioButton \r\n                        value=\"expert\"\r\n                        label=\"Expert\"\r\n                        name=\"radio1\"\r\n                        onChange={this.onDifficultyChange}\r\n                        checked={difficulty === 'expert'}\r\n                    />\r\n                </div>\r\n            );\r\n            return difficultyComponent;\r\n        }\r\n    }\r\n\r\n    renderPlayerTurnInfo = () => {\r\n        const { player, xIsNextTwoPlayer } = this.state;\r\n        let turnInfoComponent;\r\n        const playerTurn = <img alt=\"player\" src={`image/${ xIsNextTwoPlayer ? \"x.png\" : \"o.png\"}`} width=\"18\"/>\r\n        if (player === 'two') {\r\n            turnInfoComponent = (\r\n                <div className=\"single_info\">\r\n                    <label>Turn : {playerTurn} - Player </label>\r\n                </div> \r\n            );\r\n        } \r\n        if (player === 'single') {\r\n            turnInfoComponent = (\r\n                <div className=\"single_info\">\r\n                    <label>You : <img src=\"image/o.png\" width=\"18\" alt=\"O\"/></label>\r\n                    <label>Computer: <img src=\"image/x.png\" width=\"18\" alt=\"X\"/></label>\r\n                </div>\r\n            );\r\n        }\r\n        return turnInfoComponent;\r\n    }\r\n    checkForWinner = () => {\r\n        const { squares, player, xIsNextTwoPlayer } = this.state;\r\n        let { x_wins_single, o_wins_single, draw_single, x_wins_two, o_wins_two, draw_two} = this.state;\r\n        const winnerdata = calculateWinner(squares);\r\n        let winner_player, turn;\r\n\r\n        if (player === 'single') {\r\n            if (winnerdata) {\r\n                winner_player = winnerdata.winner.toUpperCase();\r\n                if (winner_player === 'X') {\r\n                    winner_player = 'AI';\r\n                    x_wins_single += 1;\r\n                } else {\r\n                    winner_player = 'You';\r\n                    o_wins_single += 1;\r\n                }\r\n                swal({title : winner_player + ' Won'}).then(() =>{\r\n                    setTimeout(() => {\r\n                        this.restartGame(x_wins_single, o_wins_single, draw_single, turn, player);\r\n                    }, 1000);\r\n                });\r\n            } else if (!squares.includes(null)) {\r\n                draw_single += 1;\r\n                swal({title :'Game Draw !!!'}).then(() =>{\r\n                    setTimeout(() => {\r\n                        this.restartGame(x_wins_single, o_wins_single, draw_single, xIsNextTwoPlayer, player);\r\n                    }, 1000);\r\n                });\r\n            }\r\n        } else {\r\n            if (winnerdata) {\r\n                winner_player = winnerdata.winner.toUpperCase();\r\n                if (winner_player === 'X') {\r\n                    x_wins_two += 1;\r\n                    turn = true;\r\n                }\r\n                if (winner_player === 'O') {\r\n                    o_wins_two += 1;\r\n                    turn = false;\r\n                }\r\n                swal({title : winner_player + ' Won'}).then(() =>{\r\n                    setTimeout(() => {\r\n                        this.restartGame(x_wins_two, o_wins_two, draw_two, turn, player);\r\n                    }, 1000);\r\n                });\r\n            } else if (!squares.includes(null)) {\r\n                draw_two += 1;\r\n                swal({title :'Game Draw !!!'}).then(() =>{\r\n                    setTimeout(() => {\r\n                        this.restartGame(x_wins_two, o_wins_two, draw_two, xIsNextTwoPlayer);\r\n                    }, 1000);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { squares, player } = this.state;\r\n        let { x_wins_single, o_wins_single, draw_single, x_wins_two, o_wins_two, draw_two} = this.state;\r\n        this.checkForWinner();\r\n\r\n        return (\r\n            <div className=\"game-wrapper\">\r\n                <div className=\"game-info\">\r\n                    <h2 className=\"title\">Tic Tac Toe<span className=\"version\">(Versoin : 2.24)</span></h2>\r\n                    { this.renderPlayers() }\r\n                    { this.renderDifficulty() }\r\n                    { this.renderPlayerTurnInfo() }\r\n                </div>\r\n                <div className=\"board-wrapper\">\r\n                    <Board\r\n                        squares={squares}\r\n                        onClick={i => this.handleClick(i)}\r\n                    />\r\n                    <GameState\r\n                        xWins={player === 'single' ? x_wins_single : x_wins_two}\r\n                        oWins={player === 'single' ? o_wins_single : o_wins_two}\r\n                        draw={player === 'single' ? draw_single : draw_two}\r\n                        onClickElement={()=> this.showStats()} />\r\n                </div>\r\n                <h5 className=\"developedby\">Developed By : frustrated_developer</h5>\r\n                <a className=\"link\" target=\"blank\" href=\"https://coderman-401.web.app/demos\">Visit here for more.</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './Game';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n\t<Game />,\r\n\tdocument.getElementById('root')\r\n);\r\n"],"sourceRoot":""}